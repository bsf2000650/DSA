Lecture 6 (Decimal to Binary Conversion) ---->
        Q1: -ve Decimal to Binary
        
Lecture 8 (Switch statement and Functions) ---->
        Q1:  Exit out of infinite loop using switch case without using break statement inside of loop

        Q2:  Why we can't use continue inside switch statement

        Q3:  Divide amount of 1330 into notes of 100,50,20,1 as 13, 0, 1, 10 respectively using switch statement

        Q4:  A.P (3*n + 7) using functions
        
        Q5:  Total number of set bits

        Q6:  Fibonacci series. nth fibonacci term.

Lecture 9 (Arrays) -----> 

        Q1:  How to initialize array
         with any other number rather than 1?

        Q2:  Sum all elements of an array.

Lecture 10 (Arrays Problem)

        Q1:  Find Unique number of Occurences.

        Q2:  Find all duplicates in an array.

        Q3:  Triplets Sum.

        Q4:  Sort 0 1 2.

Lecture 15 (Binary Search Problems Part 3)

        Q1. Painter's Partition Problem

Lecture 20 (Leet Code Problems)

        Q1. Merge two sorted Arrays

Lecture 22 (All About Char Arrays, Strings & Solving Leet Code)

        Q1. Check if a string is a palindrome

        Q2. Key difference between chars and strings

        Q3. Reverse words in a string

        Q4. Remove all duplicates from a string

Lecture 23 (2D Arrays)

        Q1. Rotate by 90 Degrees

Lecture 16 (Selection Sort)

        Q1. Flowchart of Selection Sort

        Q2: Stable or Unstable Algorithm

Lecture 23 : 2D Arrays 

        Q1. Pigeon Hole Principle

        Q2. Catalon number

        Q3. Inc - Exc Principle

        Q4. Factorial (212!)


Lecture 33 : Reccursion (Part 3)

        Q1. Sum of Array elements using Reccursion ([1,2,3,4,5]=15)

Lecture 35 : Reccursion (Part 4)

        Q1. Inversion Count Problem

        Q2. TC -> O(nlogn) Explore (How)

Lecture 42 : OOP Intro

        Q1. Const keyword
                Data member/Object Creation  functions
                Intilization List

Lecture 43 : OOP 2

        Q1. Hybrid Inheritance

Lecture 48 : Linked List  

        Q1. Remove duplicates from unsorted Linked List

        Q2. Split Linked List into 2 halves




